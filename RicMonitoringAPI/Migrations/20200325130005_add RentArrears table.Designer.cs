// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RicMonitoringAPI.RoomRent.Entities;

namespace RicMonitoringAPI.Migrations
{
    [DbContext(typeof(RoomRentContext))]
    [Migration("20200325130005_add RentArrears table")]
    partial class addRentArrearstable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RicMonitoringAPI.RicXplorer.Entities.BookedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .HasMaxLength(15);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("LanguagesSpoken")
                        .HasMaxLength(100);

                    b.Property<string>("LeaveMessage")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("BookedDetails");
                });

            modelBuilder.Entity("RicMonitoringAPI.RicXplorer.Entities.BookedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ages");

                    b.Property<int>("BookedDetailId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Ages");

                    b.HasIndex("BookedDetailId");

                    b.ToTable("BookedPersons");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.LookupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LookupTypes");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.LookupTypeItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<int>("LookupTypeId");

                    b.HasKey("Id");

                    b.HasIndex("LookupTypeId");

                    b.ToTable("LookupTypeItems");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.MonthlyRentBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Month");

                    b.Property<DateTime>("ProcessStartDateTime");

                    b.Property<DateTime?>("ProcesssEndDateTime");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("MonthlyRentBatch");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentArrear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsProcessed");

                    b.Property<int>("RentTransactionId");

                    b.Property<int>("RenterId");

                    b.Property<decimal>("UnpaidAmount");

                    b.HasKey("Id");

                    b.HasIndex("RentTransactionId");

                    b.HasIndex("RenterId");

                    b.ToTable("RentArrears");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Balance");

                    b.Property<DateTime?>("BalanceDateToBePaid");

                    b.Property<DateTime>("DueDate");

                    b.Property<bool>("IsDepositUsed");

                    b.Property<string>("Note");

                    b.Property<decimal>("PaidAmount");

                    b.Property<DateTime>("PaidDate");

                    b.Property<string>("Period");

                    b.Property<int>("RenterId");

                    b.Property<int>("RoomId");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("RenterId");

                    b.HasIndex("RoomId");

                    b.ToTable("RentTransactions");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Renter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvanceMonths");

                    b.Property<DateTime>("AdvancePaidDate");

                    b.Property<decimal?>("BalanceAmount");

                    b.Property<DateTime?>("BalancePaidDate");

                    b.Property<DateTime?>("DateEndRent");

                    b.Property<int>("DueDay");

                    b.Property<bool>("IsEndRent");

                    b.Property<int>("MonthsUsed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NoOfPersons");

                    b.Property<int?>("RentTransactionId");

                    b.Property<int>("RoomId");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("TotalPaidAmount");

                    b.HasKey("Id");

                    b.HasIndex("RentTransactionId");

                    b.HasIndex("RoomId");

                    b.ToTable("Renters");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Frequency");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("RicMonitoringAPI.RicXplorer.Entities.BookedPerson", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.LookupTypeItems", "LookupTypeItems")
                        .WithMany("BookedPersons")
                        .HasForeignKey("Ages")
                        .HasConstraintName("ForeignKey_LookupTypeItems_BookedPersons")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RicMonitoringAPI.RicXplorer.Entities.BookedDetail", "BookedDetail")
                        .WithMany("BookedPersons")
                        .HasForeignKey("BookedDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.LookupTypeItems", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.LookupType", "LookupTypes")
                        .WithMany("LookupTypeItems")
                        .HasForeignKey("LookupTypeId")
                        .HasConstraintName("ForeignKey_LookupTypeItems_LookupTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentArrear", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.RentTransaction", "RentTransaction")
                        .WithMany("RentArrears")
                        .HasForeignKey("RentTransactionId")
                        .HasConstraintName("ForeignKey_RentArrears_RentTransaction_RentTransactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Renter", "Renter")
                        .WithMany("RentArrears")
                        .HasForeignKey("RenterId")
                        .HasConstraintName("ForeignKey_RentArrears_Renter_RenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentTransaction", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Renter", "Renter")
                        .WithMany("RentTransactions")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Room", "Room")
                        .WithMany("RentTransactions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Renter", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.RentTransaction", "RentTransaction")
                        .WithMany("Renters")
                        .HasForeignKey("RentTransactionId")
                        .HasConstraintName("ForeignKey_Renter_RentTransaction");

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Room", "Room")
                        .WithMany("Renters")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("ForeignKey_Renter_Room")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
