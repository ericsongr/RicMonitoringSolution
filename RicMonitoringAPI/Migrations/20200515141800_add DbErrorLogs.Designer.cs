// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RicMonitoringAPI.RoomRent.Entities;

namespace RicMonitoringAPI.Migrations
{
    [DbContext(typeof(RoomRentContext))]
    [Migration("20200515141800_add DbErrorLogs")]
    partial class addDbErrorLogs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RicMonitoringAPI.RicXplorer.Entities.BookedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LanguagesSpoken")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LeaveMessage")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("BookedDetails");
                });

            modelBuilder.Entity("RicMonitoringAPI.RicXplorer.Entities.BookedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ages")
                        .HasColumnType("int");

                    b.Property<int>("BookedDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Ages");

                    b.HasIndex("BookedDetailId");

                    b.ToTable("BookedPersons");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.DbErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DbErrorLogs");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.LookupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LookupTypes");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.LookupTypeItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LookupTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LookupTypeId");

                    b.ToTable("LookupTypeItems");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.MonthlyRentBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProcessStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcesssEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MonthlyRentBatch");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentArrear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<int>("RentTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnpaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RentTransactionId");

                    b.HasIndex("RenterId");

                    b.ToTable("RentArrears");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdjustmentBalancePaymentDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BalanceDateToBePaid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDepositUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SystemDateTimeProcessed")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RenterId");

                    b.HasIndex("RoomId");

                    b.ToTable("RentTransactions");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentTransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RentArrearId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentArrearId");

                    b.HasIndex("TransactionId");

                    b.ToTable("RentTransactionDetails");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Renter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvanceMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("AdvancePaidDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BalancePaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEndRent")
                        .HasColumnType("datetime2");

                    b.Property<int>("DueDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsEndRent")
                        .HasColumnType("bit");

                    b.Property<int>("MonthsUsed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoOfPersons")
                        .HasColumnType("int");

                    b.Property<DateTime>("PreviousDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RentTransactionId");

                    b.HasIndex("RoomId");

                    b.ToTable("Renters");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("RicMonitoringAPI.RicXplorer.Entities.BookedPerson", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.LookupTypeItems", "LookupTypeItems")
                        .WithMany("BookedPersons")
                        .HasForeignKey("Ages")
                        .HasConstraintName("ForeignKey_LookupTypeItems_BookedPersons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RicMonitoringAPI.RicXplorer.Entities.BookedDetail", "BookedDetail")
                        .WithMany("BookedPersons")
                        .HasForeignKey("BookedDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.LookupTypeItems", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.LookupType", "LookupTypes")
                        .WithMany("LookupTypeItems")
                        .HasForeignKey("LookupTypeId")
                        .HasConstraintName("ForeignKey_LookupTypeItems_LookupTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentArrear", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.RentTransaction", "RentTransaction")
                        .WithMany("RentArrears")
                        .HasForeignKey("RentTransactionId")
                        .HasConstraintName("ForeignKey_RentArrears_RentTransaction_RentTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Renter", "Renter")
                        .WithMany("RentArrears")
                        .HasForeignKey("RenterId")
                        .HasConstraintName("ForeignKey_RentArrears_Renter_RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentTransaction", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Renter", "Renter")
                        .WithMany("RentTransactions")
                        .HasForeignKey("RenterId")
                        .HasConstraintName("ForeignKey_RentTransaction_Renter_RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Room", "Room")
                        .WithMany("RentTransactions")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("ForeignKey_RentTransaction_Room_RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.RentTransactionDetail", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.RentArrear", "RentArrear")
                        .WithMany("RentTransactionDetails")
                        .HasForeignKey("RentArrearId")
                        .HasConstraintName("ForeignKey_RentTransactionDetails_RentArrear_RentArrearId");

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.RentTransaction", "RentTransaction")
                        .WithMany("RentTransactionDetails")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("ForeignKey_RentTransactionDetails_RentTransaction_TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RicMonitoringAPI.RoomRent.Entities.Renter", b =>
                {
                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.RentTransaction", "RentTransaction")
                        .WithMany("Renters")
                        .HasForeignKey("RentTransactionId");

                    b.HasOne("RicMonitoringAPI.RoomRent.Entities.Room", "Room")
                        .WithMany("Renters")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("ForeignKey_Renter_Room")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
